[["data-transformation.html", "Chapter 3 Data Transformation 3.1 Import Packages and Dataset 3.2 Reduce Cardinality and Decode Data 3.3 Handling N/A, Special Cases and Enforce Data Types", " Chapter 3 Data Transformation 3.1 Import Packages and Dataset IPUMSR is a powerful package developed to “import census, survey and geographic data provided by ‘IPUMS’ into R plus tools to help use the associated metadata to make analysis easier” 3. Here, we use the function read_ipums_ddi to read in the data codebook, which is downloaded along with the extract and stored in XML format. In an R development environment such as RStudio, you can use the command ipums_view(ddi) to open an interactive codebook through the built-in viewer. Then, we can use read_ipums_micro(ddi) to load the actual dataset into the environment, given data file is placed next the XML codebook. library(ipumsr) library(tidyverse) library(sf) # Read in codebook ddi &lt;- read_ipums_ddi(&quot;./data/usa_00038.xml&quot;) # Load in data data &lt;- read_ipums_micro(ddi) ## Use of data from IPUMS USA is subject to conditions including that users should ## cite the data appropriately. Use command `ipums_conditions()` for more details. 3.2 Reduce Cardinality and Decode Data As discussed in the previous chapter, one issue with the data is that some variables have a high cardinality with roughly even proportion. For these categories, we cannot lump the minority values into the Other category. For this project, we collect the multi-layer categorization from the IPUMS documentation to cluster the occupation and industry into larger categories 4. We also make a decision to use lbl_na_if function from IPUMSR to mark non-occupational responses such as “keeping house” as missing values. # Remove varialbes with lower usability, as explained in previous chapter data &lt;- data %&gt;% select(-c(SERIAL, PERNUM, RELATED, RACED, BPLD, MBPLD, FBPLD, YRSUSA2, MTONGUE, MTONGUED, PRESGL)) # Data augmentation for categories of occupations and industries occ_cat &lt;- read_csv(&quot;./data/occupation_categories.csv&quot;) ind_cat &lt;- read_csv(&quot;./data/industry_categories.csv&quot;) data &lt;- left_join(data, occ_cat, by =&#39;OCC1950&#39;) data &lt;- left_join(data, ind_cat, by =&#39;IND1950&#39;) # NA relabeling based on code range data$OCC1950 &lt;- lbl_na_if(data$OCC1950, ~.val &gt; 970) %&gt;% as_factor() data$IND1950 &lt;- lbl_na_if(data$IND1950, ~.val &gt;= 975 | .val == 0) %&gt;% as_factor() data$OCCSCORE &lt;- as.numeric(data$OCCSCORE) # Factorize columns df &lt;- as_factor(data) 3.3 Handling N/A, Special Cases and Enforce Data Types The other data issue (tail values) is addressed through a series of column-specific data transformations. More specifically, we handle different codes for N/A, collapse tail values into larger categories, and ensure that all values are in the correct data type for that column. When the meaning is clear, we also trim the value to make it concise. The resulting dataset is saved as a CSV file for downstream analysis. # Customized cleaning for each column # YEAR df$YEAR &lt;- as.numeric(as.character(df$YEAR)) # CITY # FAMSIZE df$FAMSIZE &lt;- as.character(df$FAMSIZE) df$FAMSIZE[df$FAMSIZE == &quot;1 family member present&quot;] = &quot;1&quot; df$FAMSIZE[df$FAMSIZE == &quot;2 family members present&quot;] = &quot;2&quot; df$FAMSIZE &lt;- as.numeric(df$FAMSIZE) # RELATE df$RELATE &lt;- as.character(df$RELATE) df$RELATE[df$RELATE == &quot;Head/Householder&quot;] = &quot;Head&quot; df$RELATE[df$RELATE == &quot;Child-in-law&quot;] = &quot;Child&quot; df$RELATE[df$RELATE == &quot;Grandchild&quot;] = &quot;Child&quot; df$RELATE[df$RELATE == &quot;Parent-in-Law&quot;] = &quot;Parent&quot; df$RELATE[df$RELATE == &quot;Sibling-in-Law&quot;] = &quot;Sibling&quot; df$RELATE[df$RELATE == &quot;Other relatives&quot;] = &quot;Relative&quot; df$RELATE[df$RELATE == &quot;Partner, friend, visitor&quot;] = &quot;Relative&quot; df$RELATE[df$RELATE == &quot;Other non-relatives&quot;] = &quot;Other&quot; df$RELATE[df$RELATE == &quot;Institutional inmates&quot;] = &quot;Inmate&quot; df$RELATE &lt;- as.factor(df$RELATE) # SEX # AGE df$AGE &lt;- as.character(df$AGE) df$AGE[df$AGE == &quot;Less than 1 year old&quot;] = &quot;0&quot; df$AGE[df$AGE == &quot;90 (90+ in 1980 and 1990)&quot;] = &quot;90&quot; df$AGE[df$AGE %in% c(&quot;100 (100+ in 1960-1970)&quot;, &quot;112 (112+ in the 1980 internal data)&quot;, &quot;115 (115+ in the 1990 internal data)&quot;)] = &quot;100&quot; df$AGE &lt;- as.numeric(df$AGE) # MARST df$MARST &lt;- as.character(df$MARST) df$MARST[df$MARST == &#39;Married, spouse present&#39;] = &#39;Married&#39; df$MARST[df$MARST == &#39;Never married/single&#39;] = &#39;Single&#39; df$MARST[df$MARST %in% c(&#39;Married, spouse absent&#39;,&#39;Separated&#39;,&#39;Divorced&#39;,&#39;Widowed&#39;)] = &#39;Widowed or Divorced&#39; df$MARST &lt;- as.character(df$MARST) df$MARST &lt;- as.factor(df$MARST) # RACE df$RACE &lt;- as.character(df$RACE) df$RACE[df$RACE == &#39;Black/African American/Negro&#39;] = &#39;Black&#39; df$RACE[!(df$RACE %in% c(&#39;White&#39;,&#39;Black&#39;))] = &#39;Other&#39; df$RACE &lt;- as.factor(df$RACE) # BPL # MBPL # FBPL # NATIVITY df$NATIVITY &lt;- as.character(df$NATIVITY) df$NATIVITY[df$NATIVITY %in% c(&quot;Native born, and both parents native born&quot;,&quot;Native born, and father foreign, mother native&quot;,&quot;Native born, and mother foreign, father native&quot;)] = &#39;Native born with native parent&#39; df$NATIVITY[df$NATIVITY == &#39;Native born, and both parents foreign&#39;] = &#39;Native born with foreign parent&#39; df$NATIVITY[df$NATIVITY == &#39;N/A&#39;] = NA df$NATIVITY &lt;- as.factor(df$NATIVITY) # CITIZEN df$CITIZEN &lt;- as.character(df$CITIZEN) df$CITIZEN[df$CITIZEN == &#39;Not a citizen, but has received first papers&#39;] = &#39;Applying citizenship&#39; df$CITIZEN[!(df$CITIZEN %in% c(&#39;Naturalized citizen&#39;,&#39;Not a citizen&#39;, &#39;Applying citizenship&#39;))] = NA df$CITIZEN &lt;- as.factor(df$CITIZEN) # YRIMMIG df$YRIMMIG &lt;- as.character(df$YRIMMIG) df$YRIMMIG = str_replace(df$YRIMMIG, &quot; \\\\s*\\\\([^\\\\)]+\\\\)&quot;, &quot;&quot;) df$YRIMMIG[df$YRIMMIG %in% c(&#39;N/A&#39;, &#39;Not reported&#39;)] = NA df$YRIMMIG &lt;- as.numeric(df$YRIMMIG) # Creating Years spent in US variable df &lt;- df %&gt;% mutate( YRINUSA = YEAR - YRIMMIG ) # SCHOOL df$SCHOOL &lt;- as.character(df$SCHOOL) df$SCHOOL[df$SCHOOL %in% c(&quot;N/A&quot;, &quot;Unknown&quot;, &quot;Missing&quot;)] = NA df$SCHOOL &lt;- as.factor(df$SCHOOL) # LIT df$LIT &lt;- as.character(df$LIT) df$LIT[df$LIT %in% c(&quot;Yes, literate (reads and writes)&quot;,&quot;Cannot read, can write&quot;,&quot;Cannot write, can read&quot;)] = &#39;Yes, literate&#39; df$LIT[df$LIT == &#39;No, illiterate (cannot read or write)&#39;] = &#39;No, illiterate&#39; df$LIT[df$LIT %in% c(&quot;N/A&quot;, &quot;Unknown, illegible or blank&quot;)] = NA df$LIT &lt;- as.factor(df$LIT) # LABFORCE df$LABFORCE &lt;- as.character(df$LABFORCE) df$LABFORCE[df$LABFORCE == &#39;N/A&#39;] = NA df$LABFORCE &lt;- as.factor(df$LABFORCE) # OCC1950 # IND1950 # INCWAGE df$INCWAGE &lt;- as.character(df$INCWAGE) df$INCWAGE[df$INCWAGE %in% c(&#39;N/A&#39;,&#39;Missing&#39;)] = NA df$INCWAGE &lt;- as.numeric(df$INCWAGE) # OCCSCORE df$OCCSCORE[df$OCCSCORE == 0] = NA # EDSCOR50 df$EDSCOR50 &lt;- as.character(df$EDSCOR50) df$EDSCOR50[df$EDSCOR50 %in% c(&#39;N/A&#39;)] = NA df$EDSCOR50 &lt;- as.numeric(df$EDSCOR50) # Output data write.csv(df, file = &#39;./data/ipums.csv&#39;, row.names = FALSE) Ellis, Burk, Grover, Minnesota Population Center (2017). ipumsr: Read ‘IPUMS’ Extract Files. R package version 0.4.5. https://cran.r-project.org/web/packages/ipumsr/index.html↩︎ https://usa.ipums.org/usa-action/variables/OCC1950#codes_section↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
